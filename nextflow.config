/*
 * -------------------------------------------------
 *  nf-core/smrnaseq Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {

  // Workflow flags
  input = "data/*.fastq.gz"
  input_paths = null
  outdir = './results'
  protocol = 'illumina'

  // Reference genomes
  genome = null
  mirna_gtf = null
  bt_indices = null
  mirtrace_protocol = false
  references_parsed = false
  mature = "s3://lifebit-featured-datasets/pipelines/smrnaseq/references/mirbase/v22.1/mature.fa.gz"
  hairpin = "s3://lifebit-featured-datasets/pipelines/smrnaseq/references/mirbase/v22.1/hairpin.fa.gz"

  // Trimming options
  clip_r1 = 0
  three_prime_clip_r1 = 0
  three_prime_adapter = "TGGAATTCTCGGGTGCCAAGG"
  min_length = 17
  skip_qc = false
  skip_fastqc = false
  skip_multiqc = false
  skip_mirdeep = false
  save_reference = true
  seq_center = ""
  trim_galore_max_length = 40

  // Boilerplate options
  multiqc_config = false
  monochrome_logs = false
  help = false
  tracedir = "${params.outdir}/pipeline_info"
  config_profile_name = null
  config_profile_description = false
  config_profile_contact = false
  config_profile_url = false
  publish_dir_mode = 'copy'
  validate_params = true
  show_hidden_params = false
  schema_ignore_params = 'genomes,input_paths'

  mirna_gtf_prefix = "s3://lifebit-featured-datasets/pipelines/smrnaseq/references/mirbase/v22.1"

  genomes {
    'GRCh37' {
      fasta       = "s3://lifebit-featured-datasets/pipelines/smrnaseq/references/GRCh37/genome.fa"
      bowtie2     = "s3://lifebit-featured-datasets/pipelines/smrnaseq/references/GRCh37/Bowtie2Index/"
      mirtrace_species = "hsa"
    }
    'GRCh38' {
      fasta       = "s3://lifebit-featured-datasets/pipelines/smrnaseq/references/GRCh38/genome.fa"
      bowtie2     = "s3://lifebit-featured-datasets/pipelines/smrnaseq/references/GRCh38/Bowtie2Index/"
      mirtrace_species = "hsa"
    }
  }

  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h

  config = 'conf/base.config'

}

// Container slug. Stable releases should specify release tag!
// Developmental code should specify :dev
process.container = 'nfcore/smrnaseq:1.1.0'

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'


docker.enabled = true
// Avoid this error:
//   WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
// Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351
// once this is established and works well, nextflow might implement this behavior as new default.
docker.runOptions = '-u \$(id -u):\$(id -g)'


profiles {
  standard { includeConfig params.config }
  test { includeConfig 'conf/test.config' }
  test_full { includeConfig 'conf/test_full.config' }
}



// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
  R_PROFILE_USER = "/.Rprofile"
  R_ENVIRON_USER = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag_${trace_timestamp}.svg"
}

manifest {
  name = 'nf-core/smrnaseq'
  author = 'Phil Ewels <phil.ewels@scilifelab.se>, Chuan Wang <chuan.wang@scilifelab.se>, Rickard Hammar√©n <rickard.hammaren@scilifelab.se>, Lorena Pantano <lorena.pantano@gmail.com>'
  homePage = 'https://github.com/nf-core/smrnaseq'
  description = 'Small RNA-Seq Best Practice Analysis Pipeline.'
  mainScript = 'main.nf'
  nextflowVersion = '>=20.04.0'
  version = '1.1.0'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
